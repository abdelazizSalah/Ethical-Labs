quit
run remove 1024 (shell cat payload.bin)
run remove 1024 
run remove 1024 0x90909090909090909090909090909090909090909090909090909090909090909090909090909090909031c0b00131dbb305cd8044c8ffff
quit
b check_password
run remove 1024 0x90909090909090909090909090909090909090909090909090909090909090909090909090909090909031c0b00131dbb305cd8044c8ffff
info frame
next
next
next
info frame
quit
b check_password
run remove 1024 0x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x900x310xc00xb00x010x310xdb0xb30x050xcd0x800x440xc80xff0xff
next
next
next
info frame
quit
info frame
b check_password
run 
quit
b check_password
run
info frame
next
next
info frame
next
info frame
next
next
next
continue
quit
print &password
b check_password
run remove 1024 12345
p &password
p &lhs
quit
b check_password
run remove 1024 11111
next
p &lhs
p &password
quit
b check_password
run
next
next
next
info frame
quit
b check_password
run remove 1024 12345
info frame
next
nex
next
p &lhs
info frame
quit
info args
quit
run reset 1024 $(echo -e "\x90\x90")
quit
run reset 1024 aaaaaa
run remove 1024 aaaaaa
next
next
info frame
p &lhs
p &password
quit
b check_password
quit
b check_password
run 
info frame
next
next
next
info frame
p &lhs
p &password
quit
b check_password
run
next
next
next
info frame
p &password
p &lhs
quit
b check_password
run
next
next
next
p &lhs
info frame
next
next
continue
continue
next
quit
b check_password
run
continue
quit
run 
b check_password
run 
info frame
p &esp
x/64xb $esp
x/128xb $esp
next
next
next
x/128xb $esp
info frame
p &lhs
quit
run
quit
run
continue
continue
info frame
quit
run
To investigate the memory range from `0xffffc830` to `0xffffc890` in GDB, you can use the `x` (examine) command.

---

### âœ… Step-by-Step in GDB

#### 1. **Calculate how many bytes are in the range:**

```bash
0xffffc890 - 0xffffc830 = 0x60 = 96 bytes
```

---

#### 2. **Use GDB to examine that range:**

You can inspect memory in:

* **bytes (`b`)**
* **halfwords (`h`, 2 bytes)**
* **words (`w`, 4 bytes)**

For **bytes** (96 bytes total):

```gdb
(gdb) x/96xb 0xffffc830
```

For **4-byte words** (24 words total):

```gdb
(gdb) x/24xw 0xffffc830
```

---

### ðŸ”„ Alternate: Display with addresses and ASCII

To show contents with ASCII (
c
x/96xb 0xffffc830
quit
b check_password
run
 x/96xb 0xffffc830
next
next
next
 x/96xb 0xffffc830
continue
exit
b check_password(Student const*, char const*) 
run 
next
next
next
 x/96xb 0xffffc830
info frame
p &password
 x/96xb 0xffffc874
nex
next
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
 x/96xb 0xffffc830
quit
b check_password(Student const*, char const*) 
run
next
next
next
 x/96xb 0xffffc830
next
 x/96xb 0xffffc830
quit
run
quit
b check_password(Student const*, char const*) 
run 
next
next
next
info frame
 x/96xb 0xffffc830
next
 x/96xb 0xffffc830
next
run
continue
run
continue
exit
run
 x/96xb 0xffffc830
b check_password(Student const*, char const*) 
run
continue
run
next
next
n
n
 x/96xb 0xffffc830
quit
